#!/bin/bash

################################################
##  Copyright Hunter Wittenborn 2020          ##
##                                            ##
##  PKGBUILD, makepkg and related assets are  ##
##  properties of their respective owners.    ##
##                                            ##
##  This program is free software; you can    ##
##  redistribute it and/or modify it under    ##
##  the terms of the GNU General Public       ##
##  License v3.0                              ##
################################################


####################
## DEFAULT VALUES ##
####################
INSTALL='FALSE'

DIR="$(echo $PWD)"
srcdir="${DIR}/src"
pkgdir="${DIR}/pkg"
files="$(ls)"


#################
##  FUNCTIONS  ##
#################

help() {
echo "makedeb"
echo "Usage: makedeb [options]"
echo ""
echo "makedeb takes PKGBUILD files and compiles APT-installable archives."
echo ""
echo "Options:"
echo "  Items must be space-separated, i.e. '-I -S'"
echo ""
echo "  --help - bring up this help menu"
echo "  -I, --install - automatically install after building"
echo "  --convert - attempt to automatically convert Arch Linux dependencies to Debian dependencies"

echo ""
echo "A config file is located in '~/.config/makedeb/config'."
echo "Options for this file:"
echo "    MAINTAINER - set a maintainer for built packages"
echo ""
echo "Report bugs at https://github.com/hwittenborn/makedeb"
}

root_check() {
  if [[ "$(whoami)" == "root" ]]; then
    echo "[!] Running makedeb as root is not allowed."
    exit 1
  fi
}

pkgsetup() {
  rm -r "${pkgdir}" &> /dev/null
  mkdir -p "${pkgdir}"/DEBIAN/
  touch "${pkgdir}"/DEBIAN/control
  }

install_makedeps() {
  if [[ "${makedepends}" != "" ]]; then
    echo "[#] Installing make dependencies..."
    local packages="$(apt list ${makedepends} 2> /dev/null | sed 's/Listing...//g' | grep -v "installed" | awk -F/ '{print $1}')"
    sudo apt install ${packages}
  fi
}
rm_makedeps() {
  if [[ "${makedepends}" != "" ]]; then
    echo "[#] Removing unneeded make dependencies..."
    sudo dpkg -r ${makedepends[@]} &> /dev/null
  fi
}

install_checkdeps() {
  if [[ "${checkdepends}" != "" ]]; then
    echo "[#] Installing check dependencies..."
    local packages="$(apt list ${checkdepends} 2> /dev/null | sed 's/Listing...//g' | grep -v "installed" | awk -F/ '{print $1}')"
    sudo apt install ${packages}
  fi
}
rm_checkdeps() {
  if [[ "${checkdepends}" != "" ]]; then
    echo "[#] Removing unneeded check dependencies..."
    sudo dpkg -r ${checkdepends[@]} &> /dev/null
  fi
}

config_setup() {
  find ~/.config/makedeb/config &> /dev/null
  if [[ "$?" != "0" ]]; then
    mkdir -p ~/.config/makedeb/ &> /dev/null
    touch ~/.config/makedeb/config
  fi

  . ~/.config/makedeb/config
  }

config_import() {
  source ~/.config/makedeb/config
  }

export_control() {
  if [[ {$2} != "" ]]; then
    echo "${1} ${2}" >> "${pkgdir}"/DEBIAN/control
  fi
  }

convert_version() {
  if [[ ${epoch} == "" ]]; then
    export controlver="${pkgver}-${pkgrel}"
  else
    export controlver="${epoch}:${pkgver}-${pkgrel}"
  fi
  }

convert_arch() {
  if [[ ${arch} == "x86_64" ]]; then
    export arch="amd64"
  elif [[ ${arch} == "armv7l" ]]; then
    export arch="armhf"
  elif [[ ${arch} == "any" ]]; then
    export arch="all"
  fi
  }

convert_dependencies() {
  if [[ ${3} != "" ]]; then
    echo "${1}" >> "${pkgdir}"/DEBIAN/control
    sed -i "/${1}/s/$/ $(echo ${3} | awk -F: '{print $1}')/" "${pkgdir}"/DEBIAN/control
    for package in $(eval "echo \${$2[@]:1}" | awk -F: '{print $1}'); do
      sed -i "/${1}/s/$/, $(echo ${package})/" "${pkgdir}"/DEBIAN/control
    done
  fi
  }

transform_deps() {
  echo "[#] The dependency converter is currently in beta. Report bugs to the URL listed on the help page(--help)"
  sleep 1

  for pkg in $(cat /etc/makedeb/packages.db); do
    string1=$(echo "${pkg}" | awk -F= '{print $1}')
    string2="$(echo "${pkg}" | awk -F= '{print $2}')"

    sed -i "s/${string1}/${string2[@]}/g" PKGBUILD
    source PKGBUILD
  done

  new_depends=$(echo $(echo ${depends[@]} | sed "s/ /\n/g")); sed -i "s/depends=.*/depends=($new_depends)/g" PKGBUILD
  new_optdepends=$(echo $(echo ${optdepends[@]} | sed "s/ /\n/g")); sed -i "s/optdepends=.*/optdepends=($new_optdepends)/g" PKGBUILD
  new_conflicts=$(echo $(echo ${conflicts[@]} | sed "s/ /\n/g")); sed -i "s/conflicts=.*/conflicts=($new_conflicts)/g" PKGBUILD
  source PKGBUILD
}

####################
##  START SCRIPT  ##
####################
root_check${conflicts[@]}
config_setup
while true; do
  case "${1}" in
  --help)                                 help; exit 0 ;;
  -I | --install)                         INSTALL="TRUE" ;;
  --convert)                              CONVERT="TRUE" ;;
  "")                                     break ;;
  esac
  shift
  done

if [[ ${CONVERT} == "TRUE" ]]; then
  source PKGBUILD
  echo "[#] Attempting to convert dependencies in PKGBUILD..."
  transform_deps
fi

install_makedeps
install_checkdeps

echo "[#] Running makepkg..."
makepkg ${OPTIONS[@]} || exit 1

rm_makedeps
rm_checkdeps

echo "[#] Generating control file..."
pkgsetup
convert_version
convert_arch

export_control "Package:" "${pkgname}"
export_control "Description:" "${pkgdesc}"
export_control "Source:" "${source}"
export_control "Version:" "${controlver}"
export_control "Architecture:" "${arch}"
export_control "Maintainer:" "${MAINTAINER}"
convert_dependencies "Depends:" "depends" "${depends}"
convert_dependencies "Suggests:" "optdepends" "${optdepends}"
convert_dependencies "Conflicts:" "conflicts" "${conflicts}"
echo "" >> "${pkgdir}"/DEBIAN/control

echo "[#] Extracting $(ls | grep ".pkg.tar.zst") to pkgdir..."
mkdir -p "${DIR}/makedeb.temp"
cp "$(ls | grep ".pkg.tar.zst")" "${DIR}/makedeb.temp"
rm "$(ls | grep ".pkg.tar.zst")"

cd "${DIR}/makedeb.temp"
tar -xf "$(ls | grep ".pkg.tar.zst")"
rm "$(ls | grep ".pkg.tar.zst")"

transfer="$(ls)"
for thing in ${transfer}; do
  cp ${thing} "${pkgdir}" -r
done

cd "${DIR}"
sudo rm -r makedeb.temp

field() {
  cat "${pkgdir}/DEBIAN/control" | grep "${1}:" | awk -F": " '{print $2}'
}

debname=$( echo "$(field Package)_$(field Version)_$(field Architecture)" )

find "${DIR}/${debname}.deb" &> /dev/null
if [[ ${?} == "0" ]]; then
  echo "[#] Built package detected. Removing..."
  rm "${DIR}/${debname}.deb"
fi

echo "[#] Building package..."
dpkg -b "${pkgdir}" >> /dev/null
dpkg-name $(basename "${pkgdir}").deb >> /dev/null
echo "[#] Built package..."

if [[ ${INSTALL} == "TRUE" ]]; then
  sudo apt install "${DIR}/${debname}.deb"
fi
