#!/bin/bash

################################################
##  Copyright Hunter Wittenborn 2021          ##
##                                            ##
##  PKGBUILD, makepkg and related assets are  ##
##  properties of their respective owners.    ##
##                                            ##
##  This program is free software; you can    ##
##  redistribute it and/or modify it under    ##
##  the terms of the GNU General Public       ##
##  License v3.0                              ##
################################################


####################
## DEFAULT VALUES ##
####################
INSTALL='FALSE'
FILE='PKGBUILD'

#################
## OTHER STUFF ##
#################
files="$(ls)"
DIR="$(echo $PWD)"
srcdir="${DIR}/src"
pkgdir="${DIR}/pkg"
USER=$(whoami)


#################
##  FUNCTIONS  ##
#################

help() {
echo "makedeb"
echo "Usage: makedeb [options]"
echo
echo "makedeb takes PKGBUILD files and compiles APT-installable archives."
echo
echo "Options:"
echo "  Items must be space-separated, i.e. '-I -S'"
echo
echo "  --help - bring up this help menu"
echo "  -I, --install - automatically install after building"
echo "  -F, --file, -p - specify a file to build from other than 'PKGBUILD'"
echo "  --convert[beta] - attempt to automatically convert Arch Linux dependencies to Debian dependencies"
echo "  -O, --options[beta] - passes all arguments specified after to makepkg"
echo
echo "A config file is located in '~/.config/makedeb/config'."
echo "Options for this file:"
echo "    MAINTAINER - set a maintainer for built packages"
echo
echo "Report bugs at https://github.com/hwittenborn/makedeb"
}

root_check() {
  if [[ "$(whoami)" != "root" ]]; then
    echo "[!] Root is required to run makedeb"
    exit 1
  fi
}

pkgsetup() {
  rm -r "${pkgdir}" &> /dev/null
  mkdir -p "${pkgdir}"/DEBIAN/
  touch "${pkgdir}"/DEBIAN/control
  }

install_makedeps() {
  if [[ "${makedepends}" != "" ]]; then
    echo "[#] Installing make dependencies..."
    local packages="$(apt list ${makedepends} 2> /dev/null | sed 's/Listing...//g' | grep -v "installed" | awk -F/ '{print $1}')"
    apt install ${packages}
  fi
}
rm_makedeps() {
  if [[ "${makedepends}" != "" ]]; then
    echo "[#] Removing unneeded make dependencies..."
    dpkg -r ${makedepends[@]} &> /dev/null
  fi
}

install_checkdeps() {
  if [[ "${checkdepends}" != "" ]]; then
    echo "[#] Installing check dependencies..."
    local packages="$(apt list ${checkdepends} 2> /dev/null | sed 's/Listing...//g' | grep -v "installed" | awk -F/ '{print $1}')"
    apt install ${packages}
  fi
}
rm_checkdeps() {
  if [[ "${checkdepends}" != "" ]]; then
    echo "[#] Removing unneeded check dependencies..."
    dpkg -r ${checkdepends[@]} &> /dev/null
  fi
}

makepkg_helpcheck() {
  echo "${OPTIONS}" | grep -e "--help" &> /dev/null
  if [[ ${?} == "0" ]]; then
    makepkg --help
    exit 0
  fi
}

config_setup() {
  find /home/${USER}/.config/makedeb/config &> /dev/null
  if [[ "$?" != "0" ]]; then
    mkdir -p /home/${USER}/.config/makedeb/ &> /dev/null
    touch /home/${USER}/.config/makedeb/config
  fi

  . /home/${USER}/.config/makedeb/config
  }

config_import() {
  source /home/${USER}/.config/makedeb/config
  }

export_control() {
  if [[ {$2} != "" ]]; then
    echo "${1} ${2}" >> "${pkgdir}"/DEBIAN/control
  fi
  }

convert_version() {
  if [[ ${epoch} == "" ]]; then
    export controlver="${pkgver}-${pkgrel}"
  else
    export controlver="${epoch}:${pkgver}-${pkgrel}"
  fi
  }

convert_arch() {
  if [[ ${arch} == "x86_64" ]]; then
    export makedeb_arch="amd64"
  elif [[ ${arch} == "armv7l" ]]; then
    export makedeb_arch="armhf"
  elif [[ ${arch} == "any" ]]; then
    export makedeb_arch="all"
  fi
  }

extract_pkg() {
  echo "[#] Extracting ${pkgname}-${controlver}-${arch} package to pkgdir..."
  tar -xf "${pkgname}-${controlver}-${arch}.pkg.tar.zst" -C "${pkgdir}"
}

convert_dependencies() {
  if [[ ${3} != "" ]]; then
    echo "${1}" >> "${pkgdir}"/DEBIAN/control
    sed -i "/${1}/s/$/ $(echo ${3} | awk -F: '{print $1}')/" "${pkgdir}"/DEBIAN/control
    for package in $(eval "echo \${$2[@]:1}" | awk -F: '{print $1}'); do
      sed -i "/${1}/s/$/, $(echo ${package})/" "${pkgdir}"/DEBIAN/control
    done
  fi
  }

transform_deps() {
  echo "[#] The dependency converter is currently in beta. Report bugs to the URL listed on the help page(--help)"
  sleep 1

  for pkg in $(cat /etc/makedeb/packages.db); do
    string1=$(echo "${pkg}" | awk -F= '{print $1}')
    string2="$(echo "${pkg}" | awk -F= '{print $2}')"

    sed -i "s/${string1}/${string2[@]}/g" "${FILE}"
    source "${FILE}"
  done

  new_depends=$(echo $(echo ${depends[@]} | sed "s/ /\n/g")); sed -i "s/depends=.*/depends=($new_depends)/g" "${FILE}"
  new_optdepends=$(echo $(echo ${optdepends[@]} | sed "s/ /\n/g")); sed -i "s/optdepends=.*/optdepends=($new_optdepends)/g" "${FILE}"
  new_conflicts=$(echo $(echo ${conflicts[@]} | sed "s/ /\n/g")); sed -i "s/conflicts=.*/conflicts=($new_conflicts)/g" "${FILE}"
  source "${FILE}"
}

####################
##  START SCRIPT  ##
####################
root_check${conflicts[@]}
config_setup
while true; do
  case "${1}" in
  --help)                                 help; exit 0 ;;
  -F | --file | -p)                       FILE=${2}; shift;;
  -I | --install)                         INSTALL="TRUE" ;;
  -O | --options)                         shift; OPTIONS="${@}"; break ;;
  --convert)                              CONVERT="TRUE" ;;
  "")                                     break ;;
  esac
  shift
  done

source "${FILE}"
if [[ ${CONVERT} == "TRUE" ]]; then
  source "${FILE}"
  echo "[#] Attempting to convert dependencies in PKGBUILD..."
  transform_deps
fi

install_makedeps
install_checkdeps

echo "[#] Running makepkg..."
makepkg_helpcheck
sudo -u ${USER} makepkg -p "${FILE}" ${OPTIONS} || exit 1

rm_makedeps
rm_checkdeps

pkgsetup
convert_version
convert_arch

extract_pkg

echo "[#] Generating control file..."
export_control "Package:" "${pkgname}"
export_control "Description:" "${pkgdesc}"
export_control "Source:" "${source}"
export_control "Version:" "${controlver}"

arch=$(cat "${pkgdir}"/.PKGINFO | grep "arch" | awk -F" = " '{print $2}')
export_control "Architecture:" "${makedeb_arch}"
export_control "Maintainer:" "${MAINTAINER}"
convert_dependencies "Depends:" "depends" "${depends}"
convert_dependencies "Suggests:" "optdepends" "${optdepends}"
convert_dependencies "Conflicts:" "conflicts" "${conflicts}"
echo "" >> "${pkgdir}"/DEBIAN/control

field() {
  cat "${pkgdir}/DEBIAN/control" | grep "${1}:" | awk -F": " '{print $2}'
}

debname=$( echo "$(field Package)_$(field Version)_$(field Architecture)" )

find "${DIR}/${debname}.deb" &> /dev/null
if [[ ${?} == "0" ]]; then
  echo "[#] Built package detected. Removing..."
  rm "${DIR}/${debname}.deb"
fi

echo "[#] Building package..."
dpkg -b "${pkgdir}" >> /dev/null
dpkg-name $(basename "${pkgdir}").deb >> /dev/null
echo "[#] Built package..."

if [[ ${INSTALL} == "TRUE" ]]; then
  apt install "${DIR}/${debname}.deb"
fi
